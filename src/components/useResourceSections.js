import { useMemo } from 'react';
import { computeRoleBonuses } from '../engine/settlers.js';
import { RESOURCE_LIST } from '../data/resources.js';
import { RADIO_BASE_SECONDS } from '../data/settlement.js';
import { formatRate } from '../utils/format.js';
import {
  getCapacity,
  getResourceRates,
  getSettlerCapacity,
} from '../state/selectors.js';

const CATEGORY_LABELS = {
  FOOD: 'Food',
  RAW: 'Raw Materials',
  SOCIETY: 'Science',
  CONSTRUCTION_MATERIALS: 'Construction Materials',
  ENERGY: 'Energy',
};

export function useResourceSections(state) {
  const settlers = state.population?.settlers?.filter((s) => !s.isDead) || [];
  const avgHappiness =
    settlers.length > 0
      ? Math.round(
          settlers.reduce((sum, s) => sum + (s.happiness || 0), 0) /
            settlers.length,
        )
      : 0;

  const roleBonuses = useMemo(() => computeRoleBonuses(settlers), [settlers]);

  const netRates = useMemo(
    () => getResourceRates(state, true, roleBonuses),
    [state, roleBonuses],
  );

  const prodRates = useMemo(
    () => getResourceRates(state, false, roleBonuses),
    [state, roleBonuses],
  );

  const entries = useMemo(() => {
    const groups = {};
    const foodIds = [];
    RESOURCE_LIST.forEach((r) => {
      if (
        r.id === 'power' &&
        !(state.research.completed || []).includes('basicEnergy')
      )
        return;
      const amount = state.resources[r.id]?.amount || 0;
      const isFood = r.category === 'FOOD';
      const capacity = isFood ? null : getCapacity(state, r.id);
      if (isFood) foodIds.push(r.id);
      const rateInfo = (isFood ? prodRates : netRates)[r.id];
      const discovered = state.resources[r.id]?.discovered;
      if (rateInfo.perSec !== 0 || amount > 0 || discovered) {
        if (!groups[r.category]) groups[r.category] = [];
        groups[r.category].push({
          id: r.id,
          name: r.name,
          icon: r.icon,
          amount,
          capacity,
          rate: rateInfo.label,
          tooltip:
            r.id === 'power'
              ? 'Power is generated by Energy buildings and stored in Batteries. Excess above capacity is lost.'
              : undefined,
        });
      }
    });

    if (groups.FOOD) {
      const totalAmount = foodIds.reduce(
        (sum, id) => sum + (state.resources[id]?.amount || 0),
        0,
      );
      const totalCapacity =
        state.foodPool?.capacity ?? getCapacity(state, 'potatoes');
      const totalNetRate = foodIds.reduce(
        (sum, id) => sum + (netRates[id]?.perSec || 0),
        0,
      );
      const totalRow = {
        id: 'food-total',
        name: 'Total',
        amount: state.foodPool?.amount ?? totalAmount,
        capacity: totalCapacity,
        rate: formatRate(totalNetRate),
      };
      groups.FOOD = [totalRow, ...groups.FOOD];
    }

    return Object.entries(groups).map(([cat, items]) => ({
      title: CATEGORY_LABELS[cat] || cat,
      items,
      defaultOpen: true,
    }));
  }, [state, netRates, prodRates]);

  const totalSettlers = settlers.length;
  const capacity = getSettlerCapacity(state);
  const ratio = capacity > 0 ? totalSettlers / capacity : 2;
  let color = 'text-green-400';
  if (ratio > 1) color = 'text-red-500';
  else if (ratio > 0.8) color = 'text-yellow-400';
  const radioCount = state.buildings?.radio?.count || 0;
  const candidatePending = !!state.population?.candidate;
  const hasRadioResearch = (state.research.completed || []).includes('radio');
  const powered = (state.resources.power?.amount || 0) > 0;
  let radioLine = hasRadioResearch
    ? 'Radio: not built'
    : 'Radio research not complete';
  let progress = 0;
  if (hasRadioResearch && radioCount > 0) {
    if (candidatePending) {
      radioLine = 'A settler is waiting for your decision';
    } else if (!powered) {
      radioLine = 'Radio: inactive (no power)';
    } else {
      const timer = state.colony?.radioTimer ?? RADIO_BASE_SECONDS;
      const mm = String(Math.floor(timer / 60)).padStart(2, '0');
      const ss = String(Math.floor(timer % 60)).padStart(2, '0');
      radioLine = `Next settler in: ${mm}:${ss}`;
      progress = Math.max(
        0,
        Math.min(1, (RADIO_BASE_SECONDS - timer) / RADIO_BASE_SECONDS),
      );
    }
  }

  const sections = useMemo(() => {
    const rendered = [];
    entries.forEach((g) => {
      rendered.push(g);
      if (hasRadioResearch && g.title === 'Science')
        rendered.push({ title: 'Happiness', settlers: true, avgHappiness });
    });
    if (hasRadioResearch && !rendered.some((e) => e.title === 'Happiness'))
      rendered.push({ title: 'Happiness', settlers: true, avgHappiness });
    return rendered;
  }, [entries, hasRadioResearch, avgHappiness]);

  const settlersInfo = {
    total: totalSettlers,
    capacity,
    color,
    radioLine,
    progress,
    radioCount,
    candidatePending,
    powered,
  };

  return { sections, settlersInfo };
}
