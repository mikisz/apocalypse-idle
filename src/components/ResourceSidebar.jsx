import React from 'react';
import { useGame } from '../state/useGame.js';
import Accordion from './Accordion.jsx';
import {
  getCapacity,
  getResourceRates,
  getSettlerCapacity,
} from '../state/selectors.js';
import { computeRoleBonuses } from '../engine/settlers.js';
import { formatAmount, formatRate } from '../utils/format.js';
import { RESOURCE_LIST } from '../data/resources.js';
import { RADIO_BASE_SECONDS } from '../data/settlement.js';

function ResourceRow({ icon, name, amount, capacity, rate, tooltip }) {
  return (
    <div
      className="flex items-center justify-between text-sm tabular-nums"
      title={tooltip}
    >
      <span className="flex items-center gap-1">
        {icon && <span>{icon}</span>}
        <span>{name}</span>
      </span>
      <span className="flex flex-col items-end">
        <span>
          {formatAmount(amount)}
          {capacity != null && ` / ${formatAmount(capacity)}`}
        </span>
        {rate != null && <span className="text-xs text-muted">{rate}</span>}
      </span>
    </div>
  );
}

export default function ResourceSidebar() {
  const { state } = useGame();
  const roleBonuses = computeRoleBonuses(state.population?.settlers || []);
  const netRates = getResourceRates(state, true, roleBonuses);
  const prodRates = getResourceRates(state, false, roleBonuses);
  const groups = {};
  const foodIds = [];
  const CATEGORY_LABELS = {
    FOOD: 'Food',
    RAW: 'Raw Materials',
    SOCIETY: 'Science',
    CONSTRUCTION_MATERIALS: 'Construction Materials',
    ENERGY: 'Energy',
  };
  RESOURCE_LIST.forEach((r) => {
    if (
      r.id === 'power' &&
      !(state.research.completed || []).includes('basicEnergy')
    )
      return;
    const amount = state.resources[r.id]?.amount || 0;
    const isFood = r.category === 'FOOD';
    const capacity = isFood ? null : getCapacity(state, r.id);
    if (isFood) foodIds.push(r.id);
    const rateInfo = (isFood ? prodRates : netRates)[r.id];
    const discovered = state.resources[r.id]?.discovered;
    if (rateInfo.perSec !== 0 || amount > 0 || discovered) {
      if (!groups[r.category]) groups[r.category] = [];
      groups[r.category].push({
        id: r.id,
        name: r.name,
        icon: r.icon,
        amount,
        capacity,
        rate: rateInfo.label,
        tooltip:
          r.id === 'power'
            ? 'Power is generated by Energy buildings and stored in Batteries. Excess above capacity is lost.'
            : undefined,
      });
    }
  });

  if (groups.FOOD) {
    const totalAmount = foodIds.reduce(
      (sum, id) => sum + (state.resources[id]?.amount || 0),
      0,
    );
    const totalCapacity =
      state.foodPool?.capacity ?? getCapacity(state, 'potatoes');
    const totalNetRate = foodIds.reduce(
      (sum, id) => sum + (netRates[id]?.perSec || 0),
      0,
    );
    const totalRow = {
      id: 'food-total',
      name: 'Total',
      amount: state.foodPool?.amount ?? totalAmount,
      capacity: totalCapacity,
      rate: formatRate(totalNetRate),
    };
    groups.FOOD = [totalRow, ...groups.FOOD];
  }

  const entries = Object.entries(groups).map(([cat, items]) => ({
    title: CATEGORY_LABELS[cat] || cat,
    items,
    defaultOpen: true,
  }));

  const settlers = state.population?.settlers?.filter((s) => !s.isDead) || [];
  const total = settlers.length;
  const capacity = getSettlerCapacity(state);
  const ratio = capacity > 0 ? total / capacity : 2;
  let color = 'text-green-400';
  if (ratio > 1) color = 'text-red-500';
  else if (ratio > 0.8) color = 'text-yellow-400';
  const radioCount = state.buildings?.radio?.count || 0;
  const candidatePending = !!state.population?.candidate;
  const hasRadioResearch = (state.research.completed || []).includes('radio');
  let radioLine = hasRadioResearch
    ? 'Radio: not built'
    : 'Radio research not complete';
  let progress = 0;
  if (hasRadioResearch && radioCount > 0) {
    const powered = (state.resources.power?.amount || 0) > 0;
    if (candidatePending) {
      radioLine = 'A settler is waiting for your decision';
    } else if (!powered) {
      radioLine = 'Radio: inactive (no power)';
    } else {
      const timer = state.colony?.radioTimer ?? RADIO_BASE_SECONDS;
      const mm = String(Math.floor(timer / 60)).padStart(2, '0');
      const ss = String(Math.floor(timer % 60)).padStart(2, '0');
      radioLine = `Next settler in: ${mm}:${ss}`;
      progress = Math.max(
        0,
        Math.min(1, (RADIO_BASE_SECONDS - timer) / RADIO_BASE_SECONDS),
      );
    }
  }

  const rendered = [];
  entries.forEach((g) => {
    rendered.push(g);
    if (hasRadioResearch && g.title === 'Science')
      rendered.push({ title: 'Settlers', settlers: true });
  });
  if (hasRadioResearch && !rendered.some((e) => e.title === 'Settlers'))
    rendered.push({ title: 'Settlers', settlers: true });

  return (
    <div className="border border-stroke rounded overflow-hidden bg-bg2">
      {rendered.map((g) =>
        g.settlers ? (
          <Accordion key={g.title} title={g.title} defaultOpen>
            <div className={`text-sm mb-1 ${color}`}>
              Settlers {total}/{capacity}
            </div>
            <div className="text-xs text-muted mb-1">{radioLine}</div>
            {radioCount > 0 &&
              !candidatePending &&
              (state.resources.power?.amount || 0) > 0 && (
                <div className="h-2 bg-stroke rounded mb-1">
                  <div
                    className="h-full bg-green-600 rounded"
                    style={{ width: `${progress * 100}%` }}
                  />
                </div>
              )}
          </Accordion>
        ) : (
          <Accordion key={g.title} title={g.title} defaultOpen={g.defaultOpen}>
            {g.items.map((r) => (
              <ResourceRow key={r.id} {...r} />
            ))}
          </Accordion>
        ),
      )}
    </div>
  );
}
